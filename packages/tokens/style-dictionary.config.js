import StyleDictionary from 'style-dictionary';

// Custom format that properly handles resolved tokens
StyleDictionary.registerFormat({
  name: 'typescript/tokens',
  format: function(dictionary) {
    console.log('Processing', dictionary.allTokens.length, 'tokens');
    
    // Build color system from resolved tokens
    const colorSystem = {};
    const spacingScale = {};
    const shadowScale = {};
    
    // Process all resolved tokens
    dictionary.allTokens.forEach(token => {
      console.log('Processing token:', token.path.join('.'), '=', token.value);
      
      if (token.type === 'color' && token.path[0] === 'color') {
        const [, colorName, shade] = token.path;
        if (!colorSystem[colorName]) {
          colorSystem[colorName] = {};
        }
        colorSystem[colorName][shade] = token.value;
      } else if (token.type === 'spacing') {
        const spacingKey = token.path[token.path.length - 1];
        spacingScale[spacingKey] = token.value;
      } else if (token.type === 'boxShadow') {
        const shadowKey = token.path[token.path.length - 1];
        shadowScale[shadowKey] = token.value;
      }
    });

    console.log('Built color system:', Object.keys(colorSystem));

    return `// This file is generated by the build process
// DO NOT EDIT MANUALLY

export const colorSystem = ${JSON.stringify(colorSystem, null, 2)} as const;

export const spacingScale = ${JSON.stringify(spacingScale, null, 2)} as const;

export const shadowScale = ${JSON.stringify(shadowScale, null, 2)} as const;

export const flatTokens = {
  // Colors
  ...Object.entries(colorSystem).reduce((acc, [colorName, shades]) => {
    Object.entries(shades).forEach(([shade, value]) => {
      acc[\`color-\${colorName}-\${shade}\`] = value;
    });
    return acc;
  }, {} as Record<string, string>),
  
  // Spacing
  ...Object.entries(spacingScale).reduce((acc, [key, value]) => {
    acc[\`spacing-\${key}\`] = value;
    return acc;
  }, {} as Record<string, string>),
  
  // Shadows
  ...Object.entries(shadowScale).reduce((acc, [key, value]) => {
    acc[\`shadow-\${key}\`] = value;
    return acc;
  }, {} as Record<string, string>)
};

export const tokens = {
  color: colorSystem,
  spacing: spacingScale,
  shadow: shadowScale
};
`;
  }
});

const sd = new StyleDictionary({
  source: ['src/**/*.json'],
  platforms: {
    debug: {
      transformGroup: 'js',
      buildPath: 'src/',
      files: [{
        destination: 'debug-tokens.json',
        format: 'json'
      }]
    },
    typescript: {
      transformGroup: 'js',
      buildPath: 'src/',
      files: [{
        destination: 'tokens.generated.ts',
        format: 'typescript/tokens'
      }]
    }
  }
});

// Build with detailed logging
try {
  await sd.buildAllPlatforms();
  console.log('✅ Tokens built successfully');
} catch (error) {
  console.error('❌ Token build failed:', error.message);
  process.exit(1);
}